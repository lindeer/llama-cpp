// Copyright (c) 2023, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_field, unused_element
import 'dart:ffi' as ffi;

/// Helpers for getting default parameters
@ffi.Native<llama_model_params Function()>(symbol: 'llama_model_default_params')
external llama_model_params llama_model_default_params();

@ffi.Native<llama_context_params Function()>(
    symbol: 'llama_context_default_params')
external llama_context_params llama_context_default_params();

@ffi.Native<llama_model_quantize_params Function()>(
    symbol: 'llama_model_quantize_default_params')
external llama_model_quantize_params llama_model_quantize_default_params();

/// Initialize the llama + ggml backend
/// If numa is true, use NUMA optimizations
/// Call once at the start of the program
@ffi.Native<ffi.Void Function(ffi.Bool)>(symbol: 'llama_backend_init')
external void llama_backend_init(
  bool numa,
);

/// Call once at the end of the program - currently only used for MPI
@ffi.Native<ffi.Void Function()>(symbol: 'llama_backend_free')
external void llama_backend_free();

@ffi.Native<
    ffi.Pointer<llama_model> Function(ffi.Pointer<ffi.Char>,
        llama_model_params)>(symbol: 'llama_load_model_from_file')
external ffi.Pointer<llama_model> llama_load_model_from_file(
  ffi.Pointer<ffi.Char> path_model,
  llama_model_params params,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_free_model')
external void llama_free_model(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<
    ffi.Pointer<llama_context> Function(ffi.Pointer<llama_model>,
        llama_context_params)>(symbol: 'llama_new_context_with_model')
external ffi.Pointer<llama_context> llama_new_context_with_model(
  ffi.Pointer<llama_model> model,
  llama_context_params params,
);

/// Frees all allocated memory
@ffi.Native<ffi.Void Function(ffi.Pointer<llama_context>)>(symbol: 'llama_free')
external void llama_free(
  ffi.Pointer<llama_context> ctx,
);

@ffi.Native<ffi.Int64 Function()>(symbol: 'llama_time_us')
external int llama_time_us();

@ffi.Native<ffi.Size Function()>(symbol: 'llama_max_devices')
external int llama_max_devices();

@ffi.Native<ffi.Bool Function()>(symbol: 'llama_supports_mmap')
external bool llama_supports_mmap();

@ffi.Native<ffi.Bool Function()>(symbol: 'llama_supports_mlock')
external bool llama_supports_mlock();

@ffi.Native<ffi.Bool Function()>(symbol: 'llama_supports_gpu_offload')
external bool llama_supports_gpu_offload();

@ffi.Native<ffi.Bool Function()>(symbol: 'llama_mmap_supported')
external bool llama_mmap_supported();

@ffi.Native<ffi.Bool Function()>(symbol: 'llama_mlock_supported')
external bool llama_mlock_supported();

@ffi.Native<ffi.Pointer<llama_model> Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_get_model')
external ffi.Pointer<llama_model> llama_get_model(
  ffi.Pointer<llama_context> ctx,
);

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_n_ctx')
external int llama_n_ctx(
  ffi.Pointer<llama_context> ctx,
);

@ffi.Native<ffi.Uint32 Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_n_batch')
external int llama_n_batch(
  ffi.Pointer<llama_context> ctx,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_vocab_type')
external int llama_vocab_type1(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_n_vocab')
external int llama_n_vocab(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_n_ctx_train')
external int llama_n_ctx_train(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_n_embd')
external int llama_n_embd(
  ffi.Pointer<llama_model> model,
);

/// Get the model's RoPE frequency scaling factor
@ffi.Native<ffi.Float Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_rope_freq_scale_train')
external double llama_rope_freq_scale_train(
  ffi.Pointer<llama_model> model,
);

/// Get metadata value as a string by key name
@ffi.Native<
    ffi.Int32 Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Size)>(symbol: 'llama_model_meta_val_str')
external int llama_model_meta_val_str(
  ffi.Pointer<llama_model> model,
  ffi.Pointer<ffi.Char> key,
  ffi.Pointer<ffi.Char> buf,
  int buf_size,
);

/// Get the number of metadata key/value pairs
@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_model_meta_count')
external int llama_model_meta_count(
  ffi.Pointer<llama_model> model,
);

/// Get metadata key name by index
@ffi.Native<
    ffi.Int32 Function(
        ffi.Pointer<llama_model>,
        ffi.Int32,
        ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'llama_model_meta_key_by_index')
external int llama_model_meta_key_by_index(
  ffi.Pointer<llama_model> model,
  int i,
  ffi.Pointer<ffi.Char> buf,
  int buf_size,
);

/// Get metadata value as a string by index
@ffi.Native<
    ffi.Int32 Function(
        ffi.Pointer<llama_model>,
        ffi.Int32,
        ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'llama_model_meta_val_str_by_index')
external int llama_model_meta_val_str_by_index(
  ffi.Pointer<llama_model> model,
  int i,
  ffi.Pointer<ffi.Char> buf,
  int buf_size,
);

/// Get a string describing the model type
@ffi.Native<
    ffi.Int32 Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>,
        ffi.Size)>(symbol: 'llama_model_desc')
external int llama_model_desc(
  ffi.Pointer<llama_model> model,
  ffi.Pointer<ffi.Char> buf,
  int buf_size,
);

/// Returns the total size of all the tensors in the model in bytes
@ffi.Native<ffi.Uint64 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_model_size')
external int llama_model_size(
  ffi.Pointer<llama_model> model,
);

/// Returns the total number of parameters in the model
@ffi.Native<ffi.Uint64 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_model_n_params')
external int llama_model_n_params(
  ffi.Pointer<llama_model> model,
);

/// Get a llama model tensor
@ffi.Native<
    ffi.Pointer<ggml_tensor> Function(ffi.Pointer<llama_model>,
        ffi.Pointer<ffi.Char>)>(symbol: 'llama_get_model_tensor')
external ffi.Pointer<ggml_tensor> llama_get_model_tensor(
  ffi.Pointer<llama_model> model,
  ffi.Pointer<ffi.Char> name,
);

/// Returns 0 on success
@ffi.Native<
        ffi.Uint32 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<llama_model_quantize_params>)>(
    symbol: 'llama_model_quantize')
external int llama_model_quantize(
  ffi.Pointer<ffi.Char> fname_inp,
  ffi.Pointer<ffi.Char> fname_out,
  ffi.Pointer<llama_model_quantize_params> params,
);

@ffi.Native<
    ffi.Int32 Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<ffi.Char>,
        ffi.Float,
        ffi.Pointer<ffi.Char>,
        ffi.Int32)>(symbol: 'llama_apply_lora_from_file')
external int llama_apply_lora_from_file(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<ffi.Char> path_lora,
  double scale,
  ffi.Pointer<ffi.Char> path_base_model,
  int n_threads,
);

@ffi.Native<
    ffi.Int32 Function(
        ffi.Pointer<llama_model>,
        ffi.Pointer<ffi.Char>,
        ffi.Float,
        ffi.Pointer<ffi.Char>,
        ffi.Int32)>(symbol: 'llama_model_apply_lora_from_file')
external int llama_model_apply_lora_from_file(
  ffi.Pointer<llama_model> model,
  ffi.Pointer<ffi.Char> path_lora,
  double scale,
  ffi.Pointer<ffi.Char> path_base_model,
  int n_threads,
);

/// Create an empty KV cache view. (use only for debugging purposes)
@ffi.Native<
        llama_kv_cache_view Function(ffi.Pointer<llama_context>, ffi.Int32)>(
    symbol: 'llama_kv_cache_view_init')
external llama_kv_cache_view llama_kv_cache_view_init(
  ffi.Pointer<llama_context> ctx,
  int n_max_seq,
);

/// Free a KV cache view. (use only for debugging purposes)
@ffi.Native<ffi.Void Function(ffi.Pointer<llama_kv_cache_view>)>(
    symbol: 'llama_kv_cache_view_free')
external void llama_kv_cache_view_free(
  ffi.Pointer<llama_kv_cache_view> view,
);

/// Update the KV cache view structure with the current state of the KV cache. (use only for debugging purposes)
@ffi.Native<
    ffi.Void Function(ffi.Pointer<llama_context>,
        ffi.Pointer<llama_kv_cache_view>)>(symbol: 'llama_kv_cache_view_update')
external void llama_kv_cache_view_update(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_kv_cache_view> view,
);

/// Returns the number of tokens in the KV cache (slow, use only for debug)
/// If a KV cell has multiple sequences assigned to it, it will be counted multiple times
@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_get_kv_cache_token_count')
external int llama_get_kv_cache_token_count(
  ffi.Pointer<llama_context> ctx,
);

/// Returns the number of used KV cells (i.e. have at least one sequence assigned to them)
@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_get_kv_cache_used_cells')
external int llama_get_kv_cache_used_cells(
  ffi.Pointer<llama_context> ctx,
);

/// Clear the KV cache
@ffi.Native<ffi.Void Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_kv_cache_clear')
external void llama_kv_cache_clear(
  ffi.Pointer<llama_context> ctx,
);

/// Removes all tokens that belong to the specified sequence and have positions in [p0, p1)
/// seq_id < 0 : match any sequence
/// p0 < 0     : [0,  p1]
/// p1 < 0     : [p0, inf)
@ffi.Native<
    ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id, llama_pos,
        llama_pos)>(symbol: 'llama_kv_cache_seq_rm')
external void llama_kv_cache_seq_rm(
  ffi.Pointer<llama_context> ctx,
  int seq_id,
  int p0,
  int p1,
);

/// Copy all tokens that belong to the specified sequence to another sequence
/// Note that this does not allocate extra KV cache memory - it simply assigns the tokens to the new sequence
/// p0 < 0 : [0,  p1]
/// p1 < 0 : [p0, inf)
@ffi.Native<
    ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id, llama_seq_id,
        llama_pos, llama_pos)>(symbol: 'llama_kv_cache_seq_cp')
external void llama_kv_cache_seq_cp(
  ffi.Pointer<llama_context> ctx,
  int seq_id_src,
  int seq_id_dst,
  int p0,
  int p1,
);

/// Removes all tokens that do not belong to the specified sequence
@ffi.Native<ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id)>(
    symbol: 'llama_kv_cache_seq_keep')
external void llama_kv_cache_seq_keep(
  ffi.Pointer<llama_context> ctx,
  int seq_id,
);

/// Adds relative position "delta" to all tokens that belong to the specified sequence and have positions in [p0, p1)
/// If the KV cache is RoPEd, the KV data is updated accordingly
/// p0 < 0 : [0,  p1]
/// p1 < 0 : [p0, inf)
@ffi.Native<
    ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id, llama_pos,
        llama_pos, llama_pos)>(symbol: 'llama_kv_cache_seq_shift')
external void llama_kv_cache_seq_shift(
  ffi.Pointer<llama_context> ctx,
  int seq_id,
  int p0,
  int p1,
  int delta,
);

/// Integer division of the positions by factor of `d > 1`
/// If the KV cache is RoPEd, the KV data is updated accordingly
/// p0 < 0 : [0,  p1]
/// p1 < 0 : [p0, inf)
@ffi.Native<
    ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id, llama_pos,
        llama_pos, ffi.Int)>(symbol: 'llama_kv_cache_seq_div')
external void llama_kv_cache_seq_div(
  ffi.Pointer<llama_context> ctx,
  int seq_id,
  int p0,
  int p1,
  int d,
);

/// Returns the maximum size in bytes of the state (rng, logits, embedding
/// and kv_cache) - will often be smaller after compacting tokens
@ffi.Native<ffi.Size Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_get_state_size')
external int llama_get_state_size(
  ffi.Pointer<llama_context> ctx,
);

/// Copies the state to the specified destination address.
/// Destination needs to have allocated enough memory.
/// Returns the number of bytes copied
@ffi.Native<
        ffi.Size Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'llama_copy_state_data')
external int llama_copy_state_data(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<ffi.Uint8> dst,
);

/// Set the state reading from the specified address
/// Returns the number of bytes read
@ffi.Native<
        ffi.Size Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>)>(
    symbol: 'llama_set_state_data')
external int llama_set_state_data(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<ffi.Uint8> src,
);

/// Save/load session file
@ffi.Native<
    ffi.Bool Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<llama_token>,
        ffi.Size,
        ffi.Pointer<ffi.Size>)>(symbol: 'llama_load_session_file')
external bool llama_load_session_file(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<ffi.Char> path_session,
  ffi.Pointer<llama_token> tokens_out,
  int n_token_capacity,
  ffi.Pointer<ffi.Size> n_token_count_out,
);

@ffi.Native<
    ffi.Bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<llama_token>, ffi.Size)>(symbol: 'llama_save_session_file')
external bool llama_save_session_file(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<ffi.Char> path_session,
  ffi.Pointer<llama_token> tokens,
  int n_token_count,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<llama_context>, ffi.Pointer<llama_token>,
        ffi.Int32, ffi.Int32)>(symbol: 'llama_eval')
external int llama_eval(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token> tokens,
  int n_tokens,
  int n_past,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Float>,
        ffi.Int32, ffi.Int32)>(symbol: 'llama_eval_embd')
external int llama_eval_embd(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<ffi.Float> embd,
  int n_tokens,
  int n_past,
);

/// Return batch for single sequence of tokens starting at pos_0
///
/// NOTE: this is a helper function to facilitate transition to the new batch API - avoid using it
@ffi.Native<
    llama_batch Function(ffi.Pointer<llama_token>, ffi.Int32, llama_pos,
        llama_seq_id)>(symbol: 'llama_batch_get_one')
external llama_batch llama_batch_get_one(
  ffi.Pointer<llama_token> tokens,
  int n_tokens,
  int pos_0,
  int seq_id,
);

/// Allocates a batch of tokens on the heap that can hold a maximum of n_tokens
/// Each token can be assigned up to n_seq_max sequence ids
/// The batch has to be freed with llama_batch_free()
/// If embd != 0, llama_batch.embd will be allocated with size of n_tokens * embd * sizeof(float)
/// Otherwise, llama_batch.token will be allocated to store n_tokens llama_token
/// The rest of the llama_batch members are allocated with size n_tokens
/// All members are left uninitialized
@ffi.Native<llama_batch Function(ffi.Int32, ffi.Int32, ffi.Int32)>(
    symbol: 'llama_batch_init')
external llama_batch llama_batch_init(
  int n_tokens,
  int embd,
  int n_seq_max,
);

/// Frees a batch of tokens allocated with llama_batch_init()
@ffi.Native<ffi.Void Function(llama_batch)>(symbol: 'llama_batch_free')
external void llama_batch_free(
  llama_batch batch,
);

/// Positive return values does not mean a fatal error, but rather a warning.
/// 0 - success
/// 1 - could not find a KV slot for the batch (try reducing the size of the batch or increase the context)
/// < 0 - error
@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_context>, llama_batch)>(
    symbol: 'llama_decode')
external int llama_decode(
  ffi.Pointer<llama_context> ctx,
  llama_batch batch,
);

/// Set the number of threads used for decoding
/// n_threads is the number of threads used for generation (single token)
/// n_threads_batch is the number of threads used for prompt and batch processing (multiple tokens)
@ffi.Native<
        ffi.Void Function(ffi.Pointer<llama_context>, ffi.Uint32, ffi.Uint32)>(
    symbol: 'llama_set_n_threads')
external void llama_set_n_threads(
  ffi.Pointer<llama_context> ctx,
  int n_threads,
  int n_threads_batch,
);

/// Token logits obtained from the last call to llama_eval()
/// The logits for the last token are stored in the last row
/// Logits for which llama_batch.logits[i] == 0 are undefined
/// Rows: n_tokens provided with llama_batch
/// Cols: n_vocab
@ffi.Native<ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_get_logits')
external ffi.Pointer<ffi.Float> llama_get_logits(
  ffi.Pointer<llama_context> ctx,
);

/// Logits for the ith token. Equivalent to:
/// llama_get_logits(ctx) + i*n_vocab
@ffi.Native<
    ffi.Pointer<ffi.Float> Function(
        ffi.Pointer<llama_context>, ffi.Int32)>(symbol: 'llama_get_logits_ith')
external ffi.Pointer<ffi.Float> llama_get_logits_ith(
  ffi.Pointer<llama_context> ctx,
  int i,
);

/// Get the embeddings for the input
/// shape: [n_embd] (1-dimensional)
@ffi.Native<ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_get_embeddings')
external ffi.Pointer<ffi.Float> llama_get_embeddings(
  ffi.Pointer<llama_context> ctx,
);

/// Get the embeddings for the ith sequence
/// llama_get_embeddings(ctx) + i*n_embd
@ffi.Native<
        ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>, ffi.Int32)>(
    symbol: 'llama_get_embeddings_ith')
external ffi.Pointer<ffi.Float> llama_get_embeddings_ith(
  ffi.Pointer<llama_context> ctx,
  int i,
);

/// Vocab
@ffi.Native<
    ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<llama_model>, llama_token)>(symbol: 'llama_token_get_text')
external ffi.Pointer<ffi.Char> llama_token_get_text(
  ffi.Pointer<llama_model> model,
  int token,
);

@ffi.Native<ffi.Float Function(ffi.Pointer<llama_model>, llama_token)>(
    symbol: 'llama_token_get_score')
external double llama_token_get_score(
  ffi.Pointer<llama_model> model,
  int token,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>, llama_token)>(
    symbol: 'llama_token_get_type')
external int llama_token_get_type(
  ffi.Pointer<llama_model> model,
  int token,
);

/// Special tokens
@ffi.Native<llama_token Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_token_bos')
external int llama_token_bos(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<llama_token Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_token_eos')
external int llama_token_eos(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<llama_token Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_token_nl')
external int llama_token_nl(
  ffi.Pointer<llama_model> model,
);

/// Returns -1 if unknown, 1 for true or 0 for false.
@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_add_bos_token')
external int llama_add_bos_token(
  ffi.Pointer<llama_model> model,
);

/// Returns -1 if unknown, 1 for true or 0 for false.
@ffi.Native<ffi.Int32 Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_add_eos_token')
external int llama_add_eos_token(
  ffi.Pointer<llama_model> model,
);

/// codellama infill tokens
@ffi.Native<llama_token Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_token_prefix')
external int llama_token_prefix(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<llama_token Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_token_middle')
external int llama_token_middle(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<llama_token Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_token_suffix')
external int llama_token_suffix(
  ffi.Pointer<llama_model> model,
);

@ffi.Native<llama_token Function(ffi.Pointer<llama_model>)>(
    symbol: 'llama_token_eot')
external int llama_token_eot(
  ffi.Pointer<llama_model> model,
);

/// @details Convert the provided text into tokens.
/// @param tokens The tokens pointer must be large enough to hold the resulting tokens.
/// @return Returns the number of tokens on success, no more than n_max_tokens
/// @return Returns a negative number on failure - the number of tokens that would have been returned
/// @param special Allow tokenizing special and/or control tokens which otherwise are not exposed and treated as plaintext.
/// Does not insert a leading space.
@ffi.Native<
    ffi.Int32 Function(
        ffi.Pointer<llama_model>,
        ffi.Pointer<ffi.Char>,
        ffi.Int32,
        ffi.Pointer<llama_token>,
        ffi.Int32,
        ffi.Bool,
        ffi.Bool)>(symbol: 'llama_tokenize')
external int llama_tokenize(
  ffi.Pointer<llama_model> model,
  ffi.Pointer<ffi.Char> text,
  int text_len,
  ffi.Pointer<llama_token> tokens,
  int n_max_tokens,
  bool add_bos,
  bool special,
);

/// Token Id -> Piece.
/// Uses the vocabulary in the provided context.
/// Does not write null terminator to the buffer.
/// User code is responsible to remove the leading whitespace of the first non-BOS token when decoding multiple tokens.
@ffi.Native<
    ffi.Int32 Function(ffi.Pointer<llama_model>, llama_token,
        ffi.Pointer<ffi.Char>, ffi.Int32)>(symbol: 'llama_token_to_piece')
external int llama_token_to_piece(
  ffi.Pointer<llama_model> model,
  int token,
  ffi.Pointer<ffi.Char> buf,
  int length,
);

/// Grammar
@ffi.Native<
    ffi.Pointer<llama_grammar> Function(
        ffi.Pointer<ffi.Pointer<llama_grammar_element>>,
        ffi.Size,
        ffi.Size)>(symbol: 'llama_grammar_init')
external ffi.Pointer<llama_grammar> llama_grammar_init(
  ffi.Pointer<ffi.Pointer<llama_grammar_element>> rules,
  int n_rules,
  int start_rule_index,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<llama_grammar>)>(
    symbol: 'llama_grammar_free')
external void llama_grammar_free(
  ffi.Pointer<llama_grammar> grammar,
);

@ffi.Native<ffi.Pointer<llama_grammar> Function(ffi.Pointer<llama_grammar>)>(
    symbol: 'llama_grammar_copy')
external ffi.Pointer<llama_grammar> llama_grammar_copy(
  ffi.Pointer<llama_grammar> grammar,
);

/// Sets the current rng seed.
@ffi.Native<ffi.Void Function(ffi.Pointer<llama_context>, ffi.Uint32)>(
    symbol: 'llama_set_rng_seed')
external void llama_set_rng_seed(
  ffi.Pointer<llama_context> ctx,
  int seed,
);

/// @details Repetition penalty described in CTRL academic paper https://arxiv.org/abs/1909.05858, with negative logit fix.
/// @details Frequency and presence penalties described in OpenAI API https://platform.openai.com/docs/api-reference/parameter-details.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Pointer<llama_token>,
        ffi.Size,
        ffi.Float,
        ffi.Float,
        ffi.Float)>(symbol: 'llama_sample_repetition_penalties')
external void llama_sample_repetition_penalties(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  ffi.Pointer<llama_token> last_tokens,
  int penalty_last_n,
  double penalty_repeat,
  double penalty_freq,
  double penalty_present,
);

/// @details Apply classifier-free guidance to the logits as described in academic paper "Stay on topic with Classifier-Free Guidance" https://arxiv.org/abs/2306.17806
/// @param logits Logits extracted from the original generation context.
/// @param logits_guidance Logits extracted from a separate context from the same model. Other than a negative prompt at the beginning, it should have all generated and user input tokens copied from the main context.
/// @param scale Guidance strength. 1.0f means no guidance. Higher values mean stronger guidance.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<ffi.Float>,
        ffi.Pointer<ffi.Float>,
        ffi.Float)>(symbol: 'llama_sample_apply_guidance')
external void llama_sample_apply_guidance(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<ffi.Float> logits,
  ffi.Pointer<ffi.Float> logits_guidance,
  double scale,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Pointer<llama_context>,
        ffi.Float)>(symbol: 'llama_sample_classifier_free_guidance')
external void llama_sample_classifier_free_guidance(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  ffi.Pointer<llama_context> guidance_ctx,
  double scale,
);

/// @details Sorts candidate tokens by their logits in descending order and calculate probabilities based on logits.
@ffi.Native<
    ffi.Void Function(ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>)>(symbol: 'llama_sample_softmax')
external void llama_sample_softmax(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
);

/// @details Top-K sampling described in academic paper "The Curious Case of Neural Text Degeneration" https://arxiv.org/abs/1904.09751
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Int32,
        ffi.Size)>(symbol: 'llama_sample_top_k')
external void llama_sample_top_k(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  int k,
  int min_keep,
);

/// @details Nucleus sampling described in academic paper "The Curious Case of Neural Text Degeneration" https://arxiv.org/abs/1904.09751
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float,
        ffi.Size)>(symbol: 'llama_sample_top_p')
external void llama_sample_top_p(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double p,
  int min_keep,
);

/// @details Minimum P sampling as described in https://github.com/ggerganov/llama.cpp/pull/3841
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float,
        ffi.Size)>(symbol: 'llama_sample_min_p')
external void llama_sample_min_p(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double p,
  int min_keep,
);

/// @details Tail Free Sampling described in https://www.trentonbricken.com/Tail-Free-Sampling/.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float,
        ffi.Size)>(symbol: 'llama_sample_tail_free')
external void llama_sample_tail_free(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double z,
  int min_keep,
);

/// @details Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float,
        ffi.Size)>(symbol: 'llama_sample_typical')
external void llama_sample_typical(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double p,
  int min_keep,
);

/// @details Dynamic temperature implementation described in the paper https://arxiv.org/abs/2309.02772.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float,
        ffi.Float,
        ffi.Float)>(symbol: 'llama_sample_entropy')
external void llama_sample_entropy(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates_p,
  double min_temp,
  double max_temp,
  double exponent_val,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float)>(symbol: 'llama_sample_temp')
external void llama_sample_temp(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double temp,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float)>(symbol: 'llama_sample_temperature')
external void llama_sample_temperature(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double temp,
);

/// @details Apply constraints from grammar
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Pointer<llama_grammar>)>(symbol: 'llama_sample_grammar')
external void llama_sample_grammar(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  ffi.Pointer<llama_grammar> grammar,
);

/// @details Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.
/// @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.
/// @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.
/// @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.
/// @param m The number of tokens considered in the estimation of `s_hat`. This is an arbitrary value that is used to calculate `s_hat`, which in turn helps to calculate the value of `k`. In the paper, they use `m = 100`, but you can experiment with different values to see how it affects the performance of the algorithm.
/// @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal.
@ffi.Native<
    llama_token Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float,
        ffi.Float,
        ffi.Int32,
        ffi.Pointer<ffi.Float>)>(symbol: 'llama_sample_token_mirostat')
external int llama_sample_token_mirostat(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double tau,
  double eta,
  int m,
  ffi.Pointer<ffi.Float> mu,
);

/// @details Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.
/// @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.
/// @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.
/// @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.
/// @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal.
@ffi.Native<
    llama_token Function(
        ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>,
        ffi.Float,
        ffi.Float,
        ffi.Pointer<ffi.Float>)>(symbol: 'llama_sample_token_mirostat_v2')
external int llama_sample_token_mirostat_v2(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
  double tau,
  double eta,
  ffi.Pointer<ffi.Float> mu,
);

/// @details Selects the token with the highest probability.
/// Does not compute the token probabilities. Use llama_sample_softmax() instead.
@ffi.Native<
        llama_token Function(
            ffi.Pointer<llama_context>, ffi.Pointer<llama_token_data_array>)>(
    symbol: 'llama_sample_token_greedy')
external int llama_sample_token_greedy(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
);

/// @details Randomly selects a token from the candidates based on their probabilities.
@ffi.Native<
    llama_token Function(ffi.Pointer<llama_context>,
        ffi.Pointer<llama_token_data_array>)>(symbol: 'llama_sample_token')
external int llama_sample_token(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_token_data_array> candidates,
);

/// @details Accepts the sampled token into the grammar
@ffi.Native<
    ffi.Void Function(ffi.Pointer<llama_context>, ffi.Pointer<llama_grammar>,
        llama_token)>(symbol: 'llama_grammar_accept_token')
external void llama_grammar_accept_token(
  ffi.Pointer<llama_context> ctx,
  ffi.Pointer<llama_grammar> grammar,
  int token,
);

/// @details Deterministically returns entire sentence constructed by a beam search.
/// @param ctx Pointer to the llama_context.
/// @param callback Invoked for each iteration of the beam_search loop, passing in beams_state.
/// @param callback_data A pointer that is simply passed back to callback.
/// @param n_beams Number of beams to use.
/// @param n_past Number of tokens already evaluated.
/// @param n_predict Maximum number of tokens to predict. EOS may occur earlier.
@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<llama_context>,
        llama_beam_search_callback_fn_t,
        ffi.Pointer<ffi.Void>,
        ffi.Size,
        ffi.Int32,
        ffi.Int32)>(symbol: 'llama_beam_search')
external void llama_beam_search(
  ffi.Pointer<llama_context> ctx,
  llama_beam_search_callback_fn_t callback,
  ffi.Pointer<ffi.Void> callback_data,
  int n_beams,
  int n_past,
  int n_predict,
);

/// Performance information
@ffi.Native<llama_timings Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_get_timings')
external llama_timings llama_get_timings(
  ffi.Pointer<llama_context> ctx,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_print_timings')
external void llama_print_timings(
  ffi.Pointer<llama_context> ctx,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<llama_context>)>(
    symbol: 'llama_reset_timings')
external void llama_reset_timings(
  ffi.Pointer<llama_context> ctx,
);

/// Print system information
@ffi.Native<ffi.Pointer<ffi.Char> Function()>(symbol: 'llama_print_system_info')
external ffi.Pointer<ffi.Char> llama_print_system_info();

/// Set callback for all future logging events.
/// If this is not called, or NULL is supplied, everything is output on stderr.
@ffi.Native<ffi.Void Function(ggml_log_callback, ffi.Pointer<ffi.Void>)>(
    symbol: 'llama_log_set')
external void llama_log_set(
  ggml_log_callback log_callback,
  ffi.Pointer<ffi.Void> user_data,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<llama_context>)>(
    symbol: 'llama_dump_timing_info_yaml')
external void llama_dump_timing_info_yaml(
  ffi.Pointer<FILE> stream,
  ffi.Pointer<llama_context> ctx,
);

/// C interface
///
/// TODO: show sample usage
final class llama_model extends ffi.Opaque {}

final class llama_context extends ffi.Opaque {}

abstract class llama_vocab_type {
  /// SentencePiece
  static const int LLAMA_VOCAB_TYPE_SPM = 0;

  /// Byte Pair Encoding
  static const int LLAMA_VOCAB_TYPE_BPE = 1;

  /// WordPiece
  static const int LLAMA_VOCAB_TYPE_WPM = 2;
}

abstract class llama_token_type {
  static const int LLAMA_TOKEN_TYPE_UNDEFINED = 0;
  static const int LLAMA_TOKEN_TYPE_NORMAL = 1;
  static const int LLAMA_TOKEN_TYPE_UNKNOWN = 2;
  static const int LLAMA_TOKEN_TYPE_CONTROL = 3;
  static const int LLAMA_TOKEN_TYPE_USER_DEFINED = 4;
  static const int LLAMA_TOKEN_TYPE_UNUSED = 5;
  static const int LLAMA_TOKEN_TYPE_BYTE = 6;
}

/// model file types
abstract class llama_ftype {
  static const int LLAMA_FTYPE_ALL_F32 = 0;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_F16 = 1;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_0 = 2;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_1 = 3;

  /// tok_embeddings.weight and output.weight are F16
  static const int LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q8_0 = 7;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_0 = 8;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_1 = 9;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q2_K = 10;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q3_K_S = 11;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q3_K_M = 12;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q3_K_L = 13;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_K_S = 14;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q4_K_M = 15;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_K_S = 16;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q5_K_M = 17;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q6_K = 18;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_IQ2_XXS = 19;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_IQ2_XS = 20;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q2_K_S = 21;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_Q3_K_XS = 22;

  /// except 1d tensors
  static const int LLAMA_FTYPE_MOSTLY_IQ3_XXS = 23;

  /// not specified in the model file
  static const int LLAMA_FTYPE_GUESSED = 1024;
}

abstract class llama_rope_scaling_type {
  static const int LLAMA_ROPE_SCALING_UNSPECIFIED = -1;
  static const int LLAMA_ROPE_SCALING_NONE = 0;
  static const int LLAMA_ROPE_SCALING_LINEAR = 1;
  static const int LLAMA_ROPE_SCALING_YARN = 2;
  static const int LLAMA_ROPE_SCALING_MAX_VALUE = 2;
}

abstract class llama_pooling_type {
  static const int LLAMA_POOLING_NONE = 0;
  static const int LLAMA_POOLING_MEAN = 1;
  static const int LLAMA_POOLING_CLS = 2;
}

abstract class llama_split_mode {
  /// single GPU
  static const int LLAMA_SPLIT_NONE = 0;

  /// split layers and KV across GPUs
  static const int LLAMA_SPLIT_LAYER = 1;

  /// split rows across GPUs
  static const int LLAMA_SPLIT_ROW = 2;
}

final class llama_token_data extends ffi.Struct {
  /// token id
  @llama_token()
  external int id;

  /// log-odds of the token
  @ffi.Float()
  external double logit;

  /// probability of the token
  @ffi.Float()
  external double p;
}

typedef llama_token = ffi.Int32;
typedef Dartllama_token = int;

final class llama_token_data_array extends ffi.Struct {
  external ffi.Pointer<llama_token_data> data;

  @ffi.Size()
  external int size;

  @ffi.Bool()
  external bool sorted;
}

/// Input data for llama_decode
/// A llama_batch object can contain input about one or many sequences
/// The provided arrays (i.e. token, embd, pos, etc.) must have size of n_tokens
///
/// - token  : the token ids of the input (used when embd is NULL)
/// - embd   : token embeddings (i.e. float vector of size n_embd) (used when token is NULL)
/// - pos    : the positions of the respective token in the sequence
/// - seq_id : the sequence to which the respective token belongs
/// - logits : if zero, the logits for the respective token will not be output
final class llama_batch extends ffi.Struct {
  @ffi.Int32()
  external int n_tokens;

  external ffi.Pointer<llama_token> token;

  external ffi.Pointer<ffi.Float> embd;

  external ffi.Pointer<llama_pos> pos;

  external ffi.Pointer<ffi.Int32> n_seq_id;

  external ffi.Pointer<ffi.Pointer<llama_seq_id>> seq_id;

  external ffi.Pointer<ffi.Int8> logits;

  /// used if pos == NULL
  @llama_pos()
  external int all_pos_0;

  /// used if pos == NULL
  @llama_pos()
  external int all_pos_1;

  /// used if seq_id == NULL
  @llama_seq_id()
  external int all_seq_id;
}

typedef llama_pos = ffi.Int32;
typedef Dartllama_pos = int;
typedef llama_seq_id = ffi.Int32;
typedef Dartllama_seq_id = int;

abstract class llama_model_kv_override_type {
  static const int LLAMA_KV_OVERRIDE_INT = 0;
  static const int LLAMA_KV_OVERRIDE_FLOAT = 1;
  static const int LLAMA_KV_OVERRIDE_BOOL = 2;
}

final class llama_model_kv_override extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> key;

  @ffi.Int32()
  external int tag;

  external UnnamedUnion1 unnamed;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Int64()
  external int int_value;

  @ffi.Double()
  external double float_value;

  @ffi.Bool()
  external bool bool_value;
}

final class llama_model_params extends ffi.Struct {
  /// number of layers to store in VRAM
  @ffi.Int32()
  external int n_gpu_layers;

  /// how to split the model across multiple GPUs
  @ffi.Int32()
  external int split_mode;

  /// main_gpu interpretation depends on split_mode:
  /// LLAMA_SPLIT_NONE: the GPU that is used for the entire model
  /// LLAMA_SPLIT_ROW: the GPU that is used for small tensors and intermediate results
  /// LLAMA_SPLIT_LAYER: ignored
  @ffi.Int32()
  external int main_gpu;

  /// proportion of the model (layers or rows) to offload to each GPU, size: llama_max_devices()
  external ffi.Pointer<ffi.Float> tensor_split;

  /// Called with a progress value between 0.0 and 1.0. Pass NULL to disable.
  /// If the provided progress_callback returns true, model loading continues.
  /// If it returns false, model loading is immediately aborted.
  external llama_progress_callback progress_callback;

  /// context pointer passed to the progress callback
  external ffi.Pointer<ffi.Void> progress_callback_user_data;

  /// override key-value pairs of the model meta data
  external ffi.Pointer<llama_model_kv_override> kv_overrides;

  /// only load the vocabulary, no weights
  @ffi.Bool()
  external bool vocab_only;

  /// use mmap if possible
  @ffi.Bool()
  external bool use_mmap;

  /// force system to keep model in RAM
  @ffi.Bool()
  external bool use_mlock;
}

typedef llama_progress_callback
    = ffi.Pointer<ffi.NativeFunction<llama_progress_callbackFunction>>;
typedef llama_progress_callbackFunction = ffi.Bool Function(
    ffi.Float progress, ffi.Pointer<ffi.Void> ctx);
typedef Dartllama_progress_callbackFunction = bool Function(
    double progress, ffi.Pointer<ffi.Void> ctx);

final class llama_context_params extends ffi.Struct {
  /// RNG seed, -1 for random
  @ffi.Uint32()
  external int seed;

  /// text context, 0 = from model
  @ffi.Uint32()
  external int n_ctx;

  /// prompt processing maximum batch size
  @ffi.Uint32()
  external int n_batch;

  /// number of threads to use for generation
  @ffi.Uint32()
  external int n_threads;

  /// number of threads to use for batch processing
  @ffi.Uint32()
  external int n_threads_batch;

  /// RoPE scaling type, from `enum llama_rope_scaling_type`
  @ffi.Int32()
  external int rope_scaling_type;

  /// RoPE base frequency, 0 = from model
  @ffi.Float()
  external double rope_freq_base;

  /// RoPE frequency scaling factor, 0 = from model
  @ffi.Float()
  external double rope_freq_scale;

  /// YaRN extrapolation mix factor, negative = from model
  @ffi.Float()
  external double yarn_ext_factor;

  /// YaRN magnitude scaling factor
  @ffi.Float()
  external double yarn_attn_factor;

  /// YaRN low correction dim
  @ffi.Float()
  external double yarn_beta_fast;

  /// YaRN high correction dim
  @ffi.Float()
  external double yarn_beta_slow;

  /// YaRN original context size
  @ffi.Uint32()
  external int yarn_orig_ctx;

  external ggml_backend_sched_eval_callback cb_eval;

  external ffi.Pointer<ffi.Void> cb_eval_user_data;

  /// data type for K cache
  @ffi.Int32()
  external int type_k;

  /// data type for V cache
  @ffi.Int32()
  external int type_v;

  /// if true, use experimental mul_mat_q kernels (DEPRECATED - always true)
  @ffi.Bool()
  external bool mul_mat_q;

  /// the llama_eval() call computes all logits, not just the last one (DEPRECATED - set llama_batch.logits instead)
  @ffi.Bool()
  external bool logits_all;

  /// embedding mode only
  @ffi.Bool()
  external bool embedding;

  /// whether to offload the KQV ops (including the KV cache) to GPU
  @ffi.Bool()
  external bool offload_kqv;

  /// whether to pool (sum) embedding results by sequence id (ignored if no pooling layer)
  @ffi.Bool()
  external bool do_pooling;
}

/// when ask == true, the scheduler wants to know if the user wants to observe this node
/// this allows the scheduler to batch nodes together in order to evaluate them in a single call
///
/// when ask == false, the scheduler is passing the node tensor to the user for observation
/// if the user returns false, the scheduler will cancel the graph compute
typedef ggml_backend_sched_eval_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_sched_eval_callbackFunction>>;
typedef ggml_backend_sched_eval_callbackFunction = ffi.Bool Function(
    ffi.Pointer<ggml_tensor> t, ffi.Bool ask, ffi.Pointer<ffi.Void> user_data);
typedef Dartggml_backend_sched_eval_callbackFunction = bool Function(
    ffi.Pointer<ggml_tensor> t, bool ask, ffi.Pointer<ffi.Void> user_data);

/// n-dimensional tensor
final class ggml_tensor extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int backend;

  external ffi.Pointer<ggml_backend_buffer> buffer;

  /// number of elements
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> ne;

  /// stride in bytes:
  /// nb[0] = ggml_type_size(type)
  /// nb[1] = nb[0]   * (ne[0] / ggml_blck_size(type)) + padding
  /// nb[i] = nb[i-1] * ne[i-1]
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Size> nb;

  /// compute data
  @ffi.Int32()
  external int op;

  /// op params - allocated as int32_t for alignment
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int32> op_params;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<ggml_tensor> grad;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Pointer<ggml_tensor>> src;

  /// performance
  @ffi.Int()
  external int perf_runs;

  @ffi.Int64()
  external int perf_cycles;

  @ffi.Int64()
  external int perf_time_us;

  external ffi.Pointer<ggml_tensor> view_src;

  @ffi.Size()
  external int view_offs;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;

  /// extra things e.g. for ggml-cuda.cu
  external ffi.Pointer<ffi.Void> extra;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> padding;
}

abstract class ggml_type {
  static const int GGML_TYPE_F32 = 0;
  static const int GGML_TYPE_F16 = 1;
  static const int GGML_TYPE_Q4_0 = 2;
  static const int GGML_TYPE_Q4_1 = 3;

  /// GGML_TYPE_Q4_2 = 4, support has been removed
  /// GGML_TYPE_Q4_3 (5) support has been removed
  static const int GGML_TYPE_Q5_0 = 6;
  static const int GGML_TYPE_Q5_1 = 7;
  static const int GGML_TYPE_Q8_0 = 8;
  static const int GGML_TYPE_Q8_1 = 9;

  /// k-quantizations
  static const int GGML_TYPE_Q2_K = 10;
  static const int GGML_TYPE_Q3_K = 11;
  static const int GGML_TYPE_Q4_K = 12;
  static const int GGML_TYPE_Q5_K = 13;
  static const int GGML_TYPE_Q6_K = 14;
  static const int GGML_TYPE_Q8_K = 15;
  static const int GGML_TYPE_IQ2_XXS = 16;
  static const int GGML_TYPE_IQ2_XS = 17;
  static const int GGML_TYPE_IQ3_XXS = 18;
  static const int GGML_TYPE_I8 = 19;
  static const int GGML_TYPE_I16 = 20;
  static const int GGML_TYPE_I32 = 21;
  static const int GGML_TYPE_COUNT = 22;
}

abstract class ggml_backend_type {
  static const int GGML_BACKEND_CPU = 0;
  static const int GGML_BACKEND_GPU = 10;
  static const int GGML_BACKEND_GPU_SPLIT = 20;
}

final class ggml_backend_buffer extends ffi.Opaque {}

/// available tensor operations:
abstract class ggml_op {
  static const int GGML_OP_NONE = 0;
  static const int GGML_OP_DUP = 1;
  static const int GGML_OP_ADD = 2;
  static const int GGML_OP_ADD1 = 3;
  static const int GGML_OP_ACC = 4;
  static const int GGML_OP_SUB = 5;
  static const int GGML_OP_MUL = 6;
  static const int GGML_OP_DIV = 7;
  static const int GGML_OP_SQR = 8;
  static const int GGML_OP_SQRT = 9;
  static const int GGML_OP_LOG = 10;
  static const int GGML_OP_SUM = 11;
  static const int GGML_OP_SUM_ROWS = 12;
  static const int GGML_OP_MEAN = 13;
  static const int GGML_OP_ARGMAX = 14;
  static const int GGML_OP_REPEAT = 15;
  static const int GGML_OP_REPEAT_BACK = 16;
  static const int GGML_OP_CONCAT = 17;
  static const int GGML_OP_SILU_BACK = 18;

  /// normalize
  static const int GGML_OP_NORM = 19;
  static const int GGML_OP_RMS_NORM = 20;
  static const int GGML_OP_RMS_NORM_BACK = 21;
  static const int GGML_OP_GROUP_NORM = 22;
  static const int GGML_OP_MUL_MAT = 23;
  static const int GGML_OP_MUL_MAT_ID = 24;
  static const int GGML_OP_OUT_PROD = 25;
  static const int GGML_OP_SCALE = 26;
  static const int GGML_OP_SET = 27;
  static const int GGML_OP_CPY = 28;
  static const int GGML_OP_CONT = 29;
  static const int GGML_OP_RESHAPE = 30;
  static const int GGML_OP_VIEW = 31;
  static const int GGML_OP_PERMUTE = 32;
  static const int GGML_OP_TRANSPOSE = 33;
  static const int GGML_OP_GET_ROWS = 34;
  static const int GGML_OP_GET_ROWS_BACK = 35;
  static const int GGML_OP_DIAG = 36;
  static const int GGML_OP_DIAG_MASK_INF = 37;
  static const int GGML_OP_DIAG_MASK_ZERO = 38;
  static const int GGML_OP_SOFT_MAX = 39;
  static const int GGML_OP_SOFT_MAX_BACK = 40;
  static const int GGML_OP_ROPE = 41;
  static const int GGML_OP_ROPE_BACK = 42;
  static const int GGML_OP_ALIBI = 43;
  static const int GGML_OP_CLAMP = 44;
  static const int GGML_OP_CONV_TRANSPOSE_1D = 45;
  static const int GGML_OP_IM2COL = 46;
  static const int GGML_OP_CONV_TRANSPOSE_2D = 47;
  static const int GGML_OP_POOL_1D = 48;
  static const int GGML_OP_POOL_2D = 49;

  /// nearest interpolate
  static const int GGML_OP_UPSCALE = 50;
  static const int GGML_OP_PAD = 51;
  static const int GGML_OP_ARGSORT = 52;
  static const int GGML_OP_LEAKY_RELU = 53;
  static const int GGML_OP_FLASH_ATTN = 54;
  static const int GGML_OP_FLASH_FF = 55;
  static const int GGML_OP_FLASH_ATTN_BACK = 56;
  static const int GGML_OP_WIN_PART = 57;
  static const int GGML_OP_WIN_UNPART = 58;
  static const int GGML_OP_GET_REL_POS = 59;
  static const int GGML_OP_ADD_REL_POS = 60;
  static const int GGML_OP_UNARY = 61;
  static const int GGML_OP_MAP_UNARY = 62;
  static const int GGML_OP_MAP_BINARY = 63;
  static const int GGML_OP_MAP_CUSTOM1_F32 = 64;
  static const int GGML_OP_MAP_CUSTOM2_F32 = 65;
  static const int GGML_OP_MAP_CUSTOM3_F32 = 66;
  static const int GGML_OP_MAP_CUSTOM1 = 67;
  static const int GGML_OP_MAP_CUSTOM2 = 68;
  static const int GGML_OP_MAP_CUSTOM3 = 69;
  static const int GGML_OP_CROSS_ENTROPY_LOSS = 70;
  static const int GGML_OP_CROSS_ENTROPY_LOSS_BACK = 71;
  static const int GGML_OP_COUNT = 72;
}

/// model quantization parameters
final class llama_model_quantize_params extends ffi.Struct {
  /// number of threads to use for quantizing, if <=0 will use std::thread::hardware_concurrency()
  @ffi.Int32()
  external int nthread;

  /// quantize to this llama_ftype
  @ffi.Int32()
  external int ftype;

  /// allow quantizing non-f32/f16 tensors
  @ffi.Bool()
  external bool allow_requantize;

  /// quantize output.weight
  @ffi.Bool()
  external bool quantize_output_tensor;

  /// only copy tensors - ftype, allow_requantize and quantize_output_tensor are ignored
  @ffi.Bool()
  external bool only_copy;

  /// disable k-quant mixtures and quantize all tensors to the same type
  @ffi.Bool()
  external bool pure;

  /// pointer to importance matrix data
  external ffi.Pointer<ffi.Void> imatrix;
}

/// grammar types
final class llama_grammar extends ffi.Opaque {}

/// grammar element type
abstract class llama_gretype {
  /// end of rule definition
  static const int LLAMA_GRETYPE_END = 0;

  /// start of alternate definition for rule
  static const int LLAMA_GRETYPE_ALT = 1;

  /// non-terminal element: reference to rule
  static const int LLAMA_GRETYPE_RULE_REF = 2;

  /// terminal element: character (code point)
  static const int LLAMA_GRETYPE_CHAR = 3;

  /// inverse char(s) ([^a], [^a-b] [^abc])
  static const int LLAMA_GRETYPE_CHAR_NOT = 4;

  /// modifies a preceding LLAMA_GRETYPE_CHAR or LLAMA_GRETYPE_CHAR_ALT to
  /// be an inclusive range ([a-z])
  static const int LLAMA_GRETYPE_CHAR_RNG_UPPER = 5;

  /// modifies a preceding LLAMA_GRETYPE_CHAR or
  /// LLAMA_GRETYPE_CHAR_RNG_UPPER to add an alternate char to match ([ab], [a-zA])
  static const int LLAMA_GRETYPE_CHAR_ALT = 6;
}

final class llama_grammar_element extends ffi.Struct {
  @ffi.Int32()
  external int type;

  /// Unicode code point or rule ID
  @ffi.Uint32()
  external int value;
}

/// performance timing information
final class llama_timings extends ffi.Struct {
  @ffi.Double()
  external double t_start_ms;

  @ffi.Double()
  external double t_end_ms;

  @ffi.Double()
  external double t_load_ms;

  @ffi.Double()
  external double t_sample_ms;

  @ffi.Double()
  external double t_p_eval_ms;

  @ffi.Double()
  external double t_eval_ms;

  @ffi.Int32()
  external int n_sample;

  @ffi.Int32()
  external int n_p_eval;

  @ffi.Int32()
  external int n_eval;
}

/// Information associated with an individual cell in the KV cache view.
final class llama_kv_cache_view_cell extends ffi.Struct {
  /// The position for this cell. Takes KV cache shifts into account.
  /// May be negative if the cell is not populated.
  @llama_pos()
  external int pos;
}

/// An updateable view of the KV cache.
final class llama_kv_cache_view extends ffi.Struct {
  /// Number of KV cache cells. This will be the same as the context size.
  @ffi.Int32()
  external int n_cells;

  /// Maximum number of sequences that can exist in a cell. It's not an error
  /// if there are more sequences in a cell than this value, however they will
  /// not be visible in the view cells_sequences.
  @ffi.Int32()
  external int n_max_seq;

  /// Number of tokens in the cache. For example, if there are two populated
  /// cells, the first with 1 sequence id in it and the second with 2 sequence
  /// ids then you'll have 3 tokens.
  @ffi.Int32()
  external int token_count;

  /// Number of populated cache cells.
  @ffi.Int32()
  external int used_cells;

  /// Maximum contiguous empty slots in the cache.
  @ffi.Int32()
  external int max_contiguous;

  /// Index to the start of the max_contiguous slot range. Can be negative
  /// when cache is full.
  @ffi.Int32()
  external int max_contiguous_idx;

  /// Information for an individual cell.
  external ffi.Pointer<llama_kv_cache_view_cell> cells;

  /// The sequences for each cell. There will be n_max_seq items per cell.
  external ffi.Pointer<llama_seq_id> cells_sequences;
}

/// Beam search
final class llama_beam_view extends ffi.Struct {
  external ffi.Pointer<llama_token> tokens;

  @ffi.Size()
  external int n_tokens;

  /// Cumulative beam probability (renormalized relative to all beams)
  @ffi.Float()
  external double p;

  /// Callback should set this to true when a beam is at end-of-beam.
  @ffi.Bool()
  external bool eob;
}

/// Passed to beam_search_callback function.
/// Whenever 0 < common_prefix_length, this number of tokens should be copied from any of the beams
/// (e.g. beams[0]) as they will be removed (shifted) from all beams in all subsequent callbacks.
/// These pointers are valid only during the synchronous callback, so should not be saved.
final class llama_beams_state extends ffi.Struct {
  external ffi.Pointer<llama_beam_view> beam_views;

  /// Number of elements in beam_views[].
  @ffi.Size()
  external int n_beams;

  /// Current max length of prefix tokens shared by all beams.
  @ffi.Size()
  external int common_prefix_length;

  /// True iff this is the last callback invocation.
  @ffi.Bool()
  external bool last_call;
}

/// Type of pointer to the beam_search_callback function.
/// void* callback_data is any custom data passed to llama_beam_search, that is subsequently
/// passed back to beam_search_callback. This avoids having to use global variables in the callback.
typedef llama_beam_search_callback_fn_t
    = ffi.Pointer<ffi.NativeFunction<llama_beam_search_callback_fn_tFunction>>;
typedef llama_beam_search_callback_fn_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void>, llama_beams_state);
typedef Dartllama_beam_search_callback_fn_tFunction = void Function(
    ffi.Pointer<ffi.Void>, llama_beams_state);
typedef ggml_log_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_log_callbackFunction>>;
typedef ggml_log_callbackFunction = ffi.Void Function(ffi.Int32 level,
    ffi.Pointer<ffi.Char> text, ffi.Pointer<ffi.Void> user_data);
typedef Dartggml_log_callbackFunction = void Function(
    int level, ffi.Pointer<ffi.Char> text, ffi.Pointer<ffi.Void> user_data);

abstract class ggml_log_level {
  static const int GGML_LOG_LEVEL_ERROR = 2;
  static const int GGML_LOG_LEVEL_WARN = 3;
  static const int GGML_LOG_LEVEL_INFO = 4;
  static const int GGML_LOG_LEVEL_DEBUG = 5;
}

typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

const int LLAMA_DEFAULT_SEED = 4294967295;

const int LLAMA_MAX_RNG_STATE = 65536;

const int LLAMA_FILE_MAGIC_GGLA = 1734831201;

const int LLAMA_FILE_MAGIC_GGSN = 1734833006;

const int LLAMA_SESSION_MAGIC = 1734833006;

const int LLAMA_SESSION_VERSION = 4;
